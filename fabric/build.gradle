plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    if (!block_external_repositories) {
        // mavens for Fabric-exclusives
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU
        maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
        maven { url = "https://mvn.devos.one/snapshots/" }
        // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
        maven { url = "https://cursemaven.com" } // Forge Config API Port
        maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
        //maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    // dependencies
    modApi("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${minecraft_version}")

    //VS2
    modApi("org.valkyrienskies:valkyrienskies-118-fabric:${vs2_version}") { transitive = false }
    implementation("org.valkyrienskies.core:api:1.1.0+2b2f93f793") { transitive = false }

    // Kotlin
    modImplementation("net.fabricmc:fabric-language-kotlin:1.8.5+kotlin.1.7.20")
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.21"
    api "org.jetbrains.kotlin:kotlin-reflect:1.7.21"

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}") {
        exclude group: 'com.github.AlphaMode', module: 'fakeconfigtoml'
    }

    modImplementation("curse.maven:indium-459496:3911811")

    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")

    modImplementation("net.minecraftforge:forgeconfigapiport-fabric:3.2.4")

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")

    modLocalRuntime("org.valkyrienskies.eureka:eureka-fabric:${eureka_version}") { transitive = false }
    modLocalRuntime("curse.maven:lithium-360438:4143613")
    modLocalRuntime("curse.maven:dynamic-fps-335493:3606973")
    modLocalRuntime("curse.maven:smooth-boot-415758:3692365")
    modLocalRuntime("maven.modrinth:sodium:mc1.18.2-0.4.1")
    modLocalRuntime("com.moandjiezana.toml:toml4j:0.7.2")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
//    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
//        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}"); break
//        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
//        case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
//        case "disabled": break
//        default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
//    }
    // if you would like to add integration with them, uncomment them here.
//    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}")
//    modCompileOnly("mezz.jei:jei-${minecraft_version}-common:${jei_fabric_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")
//    modCompileOnly("dev.emi:emi:${emi_version}")

    // CC Restitched
    modCompileOnly("curse.maven:cc-restitched-462672:3622561")
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "vs2_version", vs2_version,
            "version", version,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version,
            "create_version", create_fabric_version // on fabric, use the entire version, unlike forge
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        if (System.getenv("GITHUB_ACTOR") != null) {
            println "Publishing to Github Packages"
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ValkyrienSkies/VSCreate")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}